Clase 43 - Documentación de APIs

API:

    Interfaz de programación de aplicaciones. Conjunto de definiciones y protocolos para desarrollar e integrar el software de apps. Permiten a los productos comunicarse con otros, sin saber cómo están implementados. Otorgan flexibilidad: simplifican diseño, administración, y uso de apps

    Las APIs públicas representan un valor comercial único, porque simplifican y amplían la forma en que se conecta con sus partners y, además, pueden rentabilizar sus datos

    Enfoques:

        - Privado: sólo usadas internamente dentro de una app
        - De partners: sólo se comparte con partners empresariales
        - Público: accesible para todos

API REST:

    Conjunto de restricciones a una API:

        - Cliente-servidor: el server controla los datos, y el cliente se encarga de manejar las interacciones del usuario
        - Sin estado: cada petición que recibe el servidor debería ser independiente y contener todo lo necesario para ser procesada
        - Cacheable
        - Interfaz uniforme: define una interfaz gráfica para administrar cada interacción que se produzce entre el cliente y el servidores de manera uniforme, lo que simplifica y separa la arquitectura
        - Sistema de capas

    Métodos:

        - GET
        - POST
        - PUT
        - PATCH
        - DELETE
        - HEAD
        - OPTIONS

        Se dice que los seguros son aquellos que no modifican recursos. Los otros son idempotentes.

    Catacterísticas:

        - Uso de hipermedios
        - Independencia del lenguaje
        - Los recursos de una API REST s identifican por medio de URI (similar a una URL)
        - Las APIs deben manejar cualquier error que se produzca

    Generador de proyectos con Express:

        Podemos generar estructuras de una API Rest, con Express generator. Usando estos módulos:

            - Debug
            - Morgan

            Debug:

                Lo usa para registrar información sobre las coincidencias de rutas, funciones de middleware usadas, etc. Es como una versión optimizadas de console.log

                Podemos hacer set DEBUG=express:* para setear la variable de entorno que permite ver todos los registros internos utilizados en Express

                Para utilizar DEBUG en una app genera con express usamos el comando DEBUG=app:* (siendo app el nombre de la app)

            Morgan:

                Se puede usar como middleware a nivel app con app.use(morgan('dev'))

Manejo y documentación de APIs:

    Se deben cumplir ciertos requisitos para diferenciar una buena documentación "simplificada" a comparación de una chota

    Es una de las piezas básicas que determina la experiencia de un desarrollador al usar una API

    Swagger:

        Herramienta útil para describir, producir, consumir, y visualizar APIs RESTful. Proporciona una interfaz web gráfica a modo de sandbox, donde podemos testear los endpoints API a la vez que se consulta la doc

        Primero se definen, dentro del campo components/schemas, el esquema de un product, por ejemplo. Al ser un objeto con campos se dfine como 'type: object'. Agregas primero los campos definidos y después las características de cada campo

        En el campo components/requestBodies definimos esquemas de objetos utilizados dentro de los cuerpos de las peticiones y respuestas para evitar redundancia a futuro

        También definimos los paths, y dentro de cada path los métodos. Se puede agregar una descripción, tag para decir a qué submétodos pertenece, y se define las caracteristicas de su petición y respuesta. Pueden incluirse varias respuestas diferentes por cada path

        Deben instalarse las dependencias:

            - express
            - swagger-express
            - swagger-ui-express

        Requerimos todo, y creamos unas options con una definition que incluya una openapi y title y description de la api, y otra option api con el path del yaml

        Cargamos una ruta en la que mostrar las docs y le mandamos el middleware de swagger para que genere todo

        Buwnas prácticas:

            - Ampliar la descripción de los endpoints de la forma más detallada posible, sin que sea muy técnico
            - Es preciso intentar evitar abstracciones en la documentación, para tratar de no confundir a los desarrolladores
            - Dettalar los parámetros y las respuestas esperadas. Evitará sorpresas
            - Señalar los diversos lenguajes de programación aceptados por la api
            - Versionado, para evitar alteraciones que puedan afectar funcionalidad ya existente que usa otra gente
            - Tutoriales como ejemplo. Añadir en cada demostración de código y ofrecer ejemplos de respuestas